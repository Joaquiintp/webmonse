#!/usr/bin/env node

/**
 * Script para verificar la configuraci√≥n del favicon din√°mico
 * 
 * Uso:
 *   node scripts/check-favicon.js
 */

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1337'

async function checkFavicon() {
  console.log('üîç Verificando configuraci√≥n del favicon...\n')
  console.log(`üìç Strapi URL: ${STRAPI_URL}\n`)

  try {
    // 1. Verificar que Strapi est√© corriendo
    console.log('1Ô∏è‚É£ Verificando que Strapi est√© activo...')
    const healthCheck = await fetch(`${STRAPI_URL}/_health`, {
      method: 'HEAD',
    }).catch(() => null)

    if (!healthCheck || !healthCheck.ok) {
      console.log('‚ùå Strapi no est√° respondiendo')
      console.log('   Aseg√∫rate de que Strapi est√© corriendo en', STRAPI_URL)
      process.exit(1)
    }
    console.log('‚úÖ Strapi est√° activo\n')

    // 2. Verificar endpoint de configuraci√≥n
    console.log('2Ô∏è‚É£ Consultando configuraci√≥n del sitio...')
    const response = await fetch(
      `${STRAPI_URL}/api/configuracion-sitio?populate=favicon`,
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    )

    if (!response.ok) {
      if (response.status === 403) {
        console.log('‚ùå Error 403: Permisos no configurados')
        console.log('   Configura los permisos en Strapi:')
        console.log('   Settings ‚Üí Roles ‚Üí Public ‚Üí configuracion-sitio ‚Üí find ‚úì')
        process.exit(1)
      } else if (response.status === 404) {
        console.log('‚ùå Error 404: El Content Type no existe')
        console.log('   Crea el Single Type "configuracion-sitio" en Strapi')
        console.log('   Ver instrucciones en FAVICON-DINAMICO.md')
        process.exit(1)
      } else {
        console.log(`‚ùå Error ${response.status}: ${response.statusText}`)
        process.exit(1)
      }
    }

    const data = await response.json()
    console.log('‚úÖ Endpoint respondiendo correctamente\n')

    // 3. Verificar contenido
    console.log('3Ô∏è‚É£ Analizando configuraci√≥n...')
    
    if (!data.data) {
      console.log('‚ö†Ô∏è  No hay configuraci√≥n creada todav√≠a')
      console.log('   Ve a Content Manager ‚Üí Configuraci√≥n del Sitio y crea una entrada')
      process.exit(0)
    }

    const config = data.data
    console.log('‚úÖ Configuraci√≥n encontrada\n')

    // 4. Verificar favicon
    console.log('4Ô∏è‚É£ Verificando favicon...')
    
    if (!config.favicon) {
      console.log('‚ö†Ô∏è  No hay favicon configurado')
      console.log('   Sube un favicon en Content Manager ‚Üí Configuraci√≥n del Sitio')
      console.log('   Formatos recomendados: .ico, .png, .svg')
      console.log('\nüí° Mientras tanto, se usar√° el favicon por defecto (/favicon.svg)')
      process.exit(0)
    }

    console.log('‚úÖ Favicon configurado:')
    console.log(`   üìÑ Nombre: ${config.favicon.name}`)
    console.log(`   üîó URL: ${config.favicon.url}`)
    if (config.favicon.alternativeText) {
      console.log(`   üìù Alt text: ${config.favicon.alternativeText}`)
    }
    
    const faviconUrl = config.favicon.url.startsWith('http') 
      ? config.favicon.url 
      : `${STRAPI_URL}${config.favicon.url}`
    
    console.log(`   üåê URL completa: ${faviconUrl}`)

    // 5. Verificar que el archivo sea accesible
    console.log('\n5Ô∏è‚É£ Verificando acceso al archivo...')
    const faviconCheck = await fetch(faviconUrl, { method: 'HEAD' })
    
    if (!faviconCheck.ok) {
      console.log('‚ùå El archivo del favicon no es accesible')
      console.log(`   Status: ${faviconCheck.status}`)
      process.exit(1)
    }
    
    console.log('‚úÖ Archivo accesible')
    console.log(`   Tipo: ${faviconCheck.headers.get('content-type')}`)
    console.log(`   Tama√±o: ${formatBytes(parseInt(faviconCheck.headers.get('content-length') || '0'))}`)

    // 6. Resumen final
    console.log('\n' + '='.repeat(60))
    console.log('‚ú® Todo configurado correctamente')
    console.log('='.repeat(60))
    console.log('\nüìå Resumen:')
    console.log(`   ‚Ä¢ Strapi: ${STRAPI_URL}`)
    console.log(`   ‚Ä¢ Favicon: ${config.favicon.name}`)
    console.log(`   ‚Ä¢ URL: ${faviconUrl}`)
    console.log('\nüöÄ El favicon din√°mico est√° funcionando correctamente')
    console.log('   Cualquier cambio en Strapi se reflejar√° autom√°ticamente\n')

  } catch (error) {
    console.log('\n‚ùå Error inesperado:', error.message)
    process.exit(1)
  }
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes'
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i]
}

// Ejecutar
checkFavicon()
